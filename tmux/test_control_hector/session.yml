name: simulation
root: ./
pre_window: export UAV_NAME=uav1; export UAV_TYPE=f450; export ODOMETRY_TYPE=hector
startup_window: control_test
windows:
  - roscore:
      layout: even-vertical
      panes:
        - roscore
  - gazebo:
      layout: even-vertical
      panes:
        - waitForRos; roslaunch mrs_simulation simulation.launch gui:=true world_name:=forest
  - rviz:
      layout: even-vertical
      panes:
        - waitForSimulation; roslaunch mrs_uav_testing rviz.launch name:=control_test
        - waitForSimulation; roslaunch mrs_rviz_plugins load_robot.launch
        - waitForSimulation; roslaunch mrs_rviz_plugins rviz_interface.launch
  - spawn:
      layout: even-vertical
      panes:
        - waitForSimulation; rosrun mrs_simulation spawn 1 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --enable-rplidar --use-gpu-ray
  - status:
      layout: even-vertical
      panes:
        - waitForOdometry; roslaunch mrs_uav_status status.launch
  - bumper:
      layout: tiled
      panes:
        - waitForOdometry; roslaunch mrs_bumper bumper.launch
  - hector_slam:
      layout: even-vertical
      panes:
        - waitForOdometry; roslaunch hector_mapping uav.launch
  - control:
      layout: even-vertical
      panes:
        - waitForOdometry; roslaunch mrs_uav_general core.launch DEBUG:=false config_uav_manager:=./custom_configs/uav_manager.yaml config_odometry:=./custom_configs/odometry.yaml config_control_manager:=./custom_configs/control_manager.yaml
  - control_test:
      layout: even-vertical
      panes:
        - waitForControl; roslaunch mrs_uav_testing control_test.launch custom_config:=./custom_configs/control_test.yaml
  - gazebo_camera_follow:
      layout: even-vertical
      panes:
        - waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1
        # - waitForControl; sleep 3; ~/.i3/layout_manager.sh layout.json
